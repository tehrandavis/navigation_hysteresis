---
title: "Data processing"
format: html
editor: visual
---

## Set up the environment

I am using the `MixedPsy` package to fit the psychometric functions. See: https://www.biorxiv.org/content/10.1101/2022.06.20.496855v1

```{r}
pacman::p_load(
  tidyverse,  # Data manipulation and visualization
  glue,       # String interpolation
  here,       # File path manipulation
  MixedPsy,   # Mixed factorial design analysis
  lmerTest,   # ANOVA for linear mixed effects models
  performance,# model testing
  afex,       # Factorial experiment analysis
  ggtext,     # Formatted text in ggplot2
  ggrain,     # Sediment grain size analysis
  ggpp,       # Enhanced ggplot2 features
  sdamr       # Marine research data analysis
)

#----- custom plot theme

text_size = 14
strip_bg_color = "grey20"
strip_text_color = "white"


# custom APA plot
theme_apa <- function(){
  theme(
    plot.title = element_markdown(size = text_size), # Adjust the size as needed
    #legend.position = "right",
    legend.text = element_markdown(size = text_size),
    legend.title = element_text(face="bold", size = text_size + 2),
    legend.key = element_blank(),
    plot.caption = element_text(hjust = 0),
    axis.text.x = element_text(size = text_size),
    axis.text.y = element_text(size = text_size),
    axis.title.x = element_markdown(size = text_size+2, face = "bold"),  # Bolds x title
    axis.title.y = element_markdown(size = text_size+2, face = "bold"),  # Bolds y title
    axis.title.x.top = element_markdown(size = text_size+2, face = "bold"),  # Bolds x title
    axis.title.y.right = element_markdown(size = text_size+2, face = "bold"),  # Bolds y title
    strip.text = element_text(size = text_size+2, face = "bold", color = strip_text_color),
    strip.background = element_rect(fill = strip_bg_color, color = "black", size = 1),    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "white"), # Set the background color to white
    axis.line = element_line(color = "black") # prevents axes from disappearing
)}
rawdata_folder <- here("rawdata")

```

#--------------------------------------

## Demographics

```{r - groups demographics}
pacman::p_load(gtsummary, finalfit) #display tables for demographics.

library(tidyverse)
library(gtsummary, finalfit)

#Reading data file
whole_sample_demo <- read_csv("rawdata/Whole_sample_demographic data.csv", col_names = T)

# Generate demographic table
whole_sample_demo %>%
  tbl_summary (by=group, type = age ~ "continuous")%>%
  add_p()

```

#--------------------------------------

## Single participant data example

```{r}
participant_data <- read_csv("rawdata/NONPRESSURE GROUP/rawP105.csv", col_names = F)

names(participant_data) <- c("part_num", "session", "trial_num", "ratio", "choice", "decision", "correct_through", "ineficient_around", "risky_bump", "correct_around")

participant_data <- participant_data %>% 
    arrange(block,trial_num) 

head(participant_data)

```

```{r}
participant_data %>% 
    group_by(part_num, ratio) %>%
    summarise(
        choice_prob = mean(choice),
        correct_through_prob = mean(correct_through),
        risky_bump_prob = mean(risky_bump),
        correct_around_prob = mean(correct_around),
        ineficient_around_prob = mean(ineficient_around)
    )
```

#--------------------------------------

## Extracting data from all participants

```{r nonpressure group}

max_block <- 16
group <- "NONPRESSURE GROUP"

participants <- c(#101, 
                  105, 108, 109, 110, 113, 116, 117, 120, 121, 124, 128, 129, 132, 134, 135, 136, 138, 141, 144, 146, 147, 150, 151, 152)

combined_nonpressure_df <- tibble()

for (part_num in participants)
  {
  
    filename  <- glue("rawP", part_num, ".csv")
    
    df <- 
      here(rawdata_folder, group, filename) %>% 
      read_csv(col_names = F, show_col_types = FALSE)
    
    names(df) <- c("part_num", "session", "trial_num", "ratio", "choice", 
               "decision", "correct_through", "ineficient_around", "risky_bump", "correct_around")
    
    df$group <- group %>% str_to_title()
    size_df <- nrow(df)

    df <- df %>%
        arrange(session,trial_num) %>%
        mutate(direction_block = rep(1:max_block, each = 9),
               training = ifelse(session == 1, "Session 1", "Session 2")) %>%
        #mutate(direction = rep(c("Asc","Desc"), each = 9, size_df/18)) %>%
        select(group, part_num, direction_block, everything())  
    
    combined_nonpressure_df <- bind_rows(combined_nonpressure_df, df)
    
    }

write_csv(combined_nonpressure_df,
          here(rawdata_folder,
               "combined_non_pressure_selection_data.csv")
          )

```

```{r pressure group}

group <- "PRESSURE GROUP"

participants <- c(102, 103, 104, 106, 107, 111, 112, 114, 115, 118, 119, 122, 123, 126, 127, 130, 131, 133, 137, 139, 140, 143, 145, 148, 149)


combined_pressure_df <- tibble()

for (part_num in participants)
  {
  
    filename  <- glue("rawP", part_num, ".csv")
    
    df <- 
      here(rawdata_folder, group, filename) %>% 
      read_csv(col_names = F, show_col_types = FALSE)
    
    names(df) <- c("part_num", "session", "trial_num", "ratio", "choice", 
               "decision", "correct_through", "ineficient_around", "risky_bump", "correct_around")
    
    df$group <- group %>% str_to_title()
    size_df <- nrow(df)
    max_block <- size_df / 9

    df <- df %>%
        arrange(session,trial_num) %>%
        mutate(direction_block = rep(1:max_block, each = 9),
               training = ifelse(session == 1, "Session 1", "Session 2")) %>%
        # mutate(direction = rep(c("Asc","Desc"), each = 9, size_df/18)) %>%
        select(group, part_num, direction_block, everything())  
    
    combined_pressure_df <- bind_rows(combined_pressure_df, df)
    
    }

write_csv(combined_pressure_df, here(rawdata_folder,
                                      "combined_pressure_selection_data.csv"))

```

## Including the training conditions in the previous data frame (unnecessary?)

```{r - New df including the "trained X "untrained conditions"}

#Reading data file

all_data_add_training <- filtered_data_raw_df[, c("group","part_num", "block", "trial_num", "ratio", "choice", "decision", "starting_ratio", "ending_ratio", "direction", "correlation", "variance")]%>%
  arrange(all_data_bytraining_block, part_num)

write_csv(all_data_add_training, "C:/Users/santo/Documents/Navigation_study/rawdata/training_conditions_test.csv")

all_data_bytraining <- read_csv("rawdata/experience_condition.csv", col_names = T)


```

## Correlation test-bed

Use this section to make potential determinations about cut off correlation criteria.

```{r}
ggplot(filtered_data_raw_df, aes(x = variance)) +
  geom_histogram() +
  theme_minimal()
```
